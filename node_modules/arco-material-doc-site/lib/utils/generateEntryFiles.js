"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPathEntryByLanguage = exports.LIBRARY_MODULE_NAME = exports.ENTRY_DIR_NAME = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const glob_parent_1 = __importDefault(require("glob-parent"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const getMainConfig_1 = __importDefault(require("./getMainConfig"));
const constant_1 = require("../constant");
const getTitleOfMarkdown_1 = __importDefault(require("./getTitleOfMarkdown"));
exports.ENTRY_DIR_NAME = '__temp__';
exports.LIBRARY_MODULE_NAME = 'arcoSite';
const VARIABLE_PREFIX = exports.LIBRARY_MODULE_NAME;
const FUNCTION_LABEL = '#FUNC#';
const { build: buildConfig, site: siteConfig } = (0, getMainConfig_1.default)();
const entryFileDir = path_1.default.resolve(exports.ENTRY_DIR_NAME);
function transformObjectToExpression(obj) {
    return (JSON.stringify(obj || {}, null, 2)
        .replace(/^"(.*)"$/s, (_, $1) => $1)
        // Convert "#FUNC#() => true;#FUNC#" to () => true;
        .replace(new RegExp(`"?${FUNCTION_LABEL}"?`, 'g'), ''));
}
function generateDocTree(options) {
    var _a, _b;
    const { entry, baseDir, filter, onFile } = options;
    const result = [];
    const files = fs_extra_1.default.readdirSync(entry);
    for (const file of files) {
        const filePath = path_1.default.resolve(entry, file);
        const filePathToBaseDir = `/${path_1.default.relative(baseDir, filePath)}`;
        const stats = fs_extra_1.default.lstatSync(filePath);
        const isFile = stats.isFile();
        const isDirectory = stats.isDirectory();
        if (isFile) {
            if (!filter || filter(filePath)) {
                const info = {
                    name: (0, getTitleOfMarkdown_1.default)(filePath),
                    path: filePathToBaseDir,
                };
                result.push(info);
                onFile(filePath, info);
            }
        }
        if (isDirectory) {
            result.push({
                name: file,
                path: filePathToBaseDir,
                children: generateDocTree(Object.assign(Object.assign({}, options), { entry: filePath })),
            });
        }
    }
    const relativePath = path_1.default.relative(baseDir, entry);
    const sortRule = ((_a = siteConfig === null || siteConfig === void 0 ? void 0 : siteConfig.menu) === null || _a === void 0 ? void 0 : _a.sortRule) && ((_b = siteConfig === null || siteConfig === void 0 ? void 0 : siteConfig.menu) === null || _b === void 0 ? void 0 : _b.sortRule[relativePath]);
    if (Array.isArray(sortRule)) {
        return result.sort(({ name: nameA }, { name: nameB }) => {
            const indexA = sortRule.indexOf(nameA);
            const indexB = sortRule.indexOf(nameB);
            if (indexA > -1 && indexB > -1) {
                return indexA > indexB ? 1 : -1;
            }
            return indexB > -1 ? 1 : -1;
        });
    }
    return result;
}
function getPathEntryByLanguage(language) {
    return path_1.default.resolve(entryFileDir, `index.js`.replace(/.js$/, `.${language}.js`));
}
exports.getPathEntryByLanguage = getPathEntryByLanguage;
function generateEntryFiles() {
    if (!buildConfig || !buildConfig.globs || !buildConfig.globs.component) {
        arco_cli_dev_utils_1.print.error('[arco-doc-site]', `Failed to get glob info of component, check your config file.`);
        process.exit(0);
    }
    const getRequirePath = (absolutePath) => {
        return path_1.default.relative(entryFileDir, absolutePath).replace(/^[^.]/, (str) => `./${str}`);
    };
    const generateEntry = (language) => {
        var _a, _b;
        const entryFilePath = getPathEntryByLanguage(language);
        const exportModuleInfoList = [];
        // Final content of entry file
        const fileContent = [
            `// Do NOT edit this file manually, it's generated by arco-material-doc-site.

/* eslint-disable */

function decodeInfo(infoStr) {
  try {
    const decoder = new TextDecoder();
    const jsonStr = decoder.decode(new Uint8Array(infoStr.split(',')));
    return JSON.parse(jsonStr);
  } catch (e) {}

  return {};
}

const moduleInfoStr = '${constant_1.PLACEHOLDER_ARCO_SITE_MODULE_INFO}';
const ${exports.LIBRARY_MODULE_NAME} = {};
`,
        ];
        exportModuleInfoList.push({
            name: `${VARIABLE_PREFIX}ModuleInfo`,
            statement: 'decodeInfo(moduleInfoStr)',
        });
        exportModuleInfoList.push({
            name: `${VARIABLE_PREFIX}Config`,
            statement: transformObjectToExpression(siteConfig),
        });
        if ((_a = buildConfig.globs) === null || _a === void 0 ? void 0 : _a.doc) {
            // Glob info about pure document
            const globDocBasePath = (0, glob_parent_1.default)(buildConfig.globs.doc);
            const globDocMagicPath = buildConfig.globs.doc.replace(`${globDocBasePath}/`, '');
            const docEntryPath = path_1.default.resolve(globDocBasePath, language);
            const validDocPathList = glob_1.default.sync(path_1.default.resolve(docEntryPath, globDocMagicPath));
            const documentInfo = generateDocTree({
                entry: docEntryPath,
                baseDir: docEntryPath,
                filter: (filePath) => validDocPathList.indexOf(filePath) > -1,
                onFile: (filePath, info) => {
                    const componentName = `Doc${validDocPathList.indexOf(filePath)}`;
                    const statement = `_${componentName}`;
                    // import document
                    fileContent.push(`\n// Import document from ${filePath}`);
                    fileContent.push(`import * as ${statement} from '${getRequirePath(filePath)}';\n`);
                    // export document
                    exportModuleInfoList.push({
                        name: componentName,
                        statement,
                    });
                    // write component name of document to docInfo
                    info.moduleName = componentName;
                },
            });
            exportModuleInfoList.push({
                name: `${VARIABLE_PREFIX}DocumentInfo`,
                statement: transformObjectToExpression(documentInfo),
            });
        }
        // Import hook
        const hookNameList = [];
        Object.entries(buildConfig.globs.hook || {}).forEach(([hookName, hookPattern]) => {
            const [hookPath] = glob_1.default.sync(hookPattern);
            if (hookPath) {
                hookNameList.push(hookName);
                fileContent.push(`import ${hookName} from '${getRequirePath(hookPath)}';`);
            }
        });
        if (hookNameList.length) {
            exportModuleInfoList.push({
                name: `${VARIABLE_PREFIX}Hook`,
                statement: `{ ${hookNameList.join(', ')} }`,
            });
        }
        // Import component demos
        glob_1.default
            .sync(buildConfig.globs.component.base)
            .map((p) => {
            const { demo, doc, style } = buildConfig.globs.component;
            return {
                componentName: path_1.default.basename(p).replace(/-(\w)/g, (_, $1) => $1.toUpperCase()),
                pathDemo: demo && path_1.default.resolve(p, demo),
                pathDoc: doc && path_1.default.resolve(p, doc),
                pathStyle: style && path_1.default.resolve(p, style),
            };
        })
            .forEach(({ componentName: moduleName, pathDemo, pathDoc, pathStyle }) => {
            let demoModuleName;
            let docModuleName;
            const tempFileContent = [`// Import demos and document of ${moduleName}`];
            if (fs_extra_1.default.existsSync(pathDemo)) {
                demoModuleName = `_${moduleName}`;
                tempFileContent.push(`import * as ${demoModuleName} from '${getRequirePath(pathDemo)}';`);
            }
            if (fs_extra_1.default.existsSync(pathDoc)) {
                docModuleName = `_${moduleName}Doc`;
                tempFileContent.push(`import ${docModuleName} from '${getRequirePath(pathDoc)}';`);
            }
            if (buildConfig.withMaterialStyle && fs_extra_1.default.existsSync(pathStyle)) {
                tempFileContent.push(`import '${pathStyle}';`);
            }
            if (demoModuleName || docModuleName) {
                fileContent.push(`\n${tempFileContent.join('\n')}\n`);
                exportModuleInfoList.push({
                    name: moduleName,
                    statement: `{ ${demoModuleName ? `...${demoModuleName}, ` : ''}${docModuleName ? `_SITE_DOC: ${docModuleName} ` : ''}}`,
                });
            }
        });
        const exportExpressions = exportModuleInfoList
            .map(({ name, statement }) => {
            return `export const ${name} = ${statement};\n${exports.LIBRARY_MODULE_NAME}.${name} = ${name};\n`;
        })
            .join('\n');
        fileContent.push(`
// Export submodules
${exportExpressions}

// Only used by team site development mode
if (window.arcoMaterialTeamSite && window.arcoMaterialTeamSite.renderPage) {
  const siteDevOptions = ${transformObjectToExpression(Object.assign(Object.assign({}, buildConfig.devOptions), { withArcoStyle: siteConfig.arcoDesignLabTheme
                ? `${FUNCTION_LABEL}() => import('${siteConfig.arcoDesignLabTheme}/css/arco.css')${FUNCTION_LABEL}`
                : (_b = buildConfig.devOptions) === null || _b === void 0 ? void 0 : _b.withArcoStyle }))};
  window.arcoMaterialTeamSite.renderPage(${exports.LIBRARY_MODULE_NAME}, siteDevOptions);
}
`);
        fs_extra_1.default.ensureDirSync(entryFileDir);
        fs_extra_1.default.writeFileSync(entryFilePath, fileContent.join('\n'));
    };
    siteConfig.languages.forEach(generateEntry);
}
exports.default = generateEntryFiles;
